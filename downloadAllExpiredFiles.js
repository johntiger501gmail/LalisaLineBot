import fs from "fs";
import path from "path";
import axios from "axios";

/**
 * üîπ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô: ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ (‡∏à‡∏≤‡∏Å log)
 * - ‡∏ï‡∏£‡∏ß‡∏à log ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå chat_history/logs/
 * - ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á
 * - ‡πÅ‡∏¢‡∏Å‡πÄ‡∏Å‡πá‡∏ö‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó (images / videos / files)
 */
export async function downloadAllExpiredFiles(client) {
  try {
    const baseDir = path.join(process.cwd(), "chat_history");
    const logDir = path.join(baseDir, "logs");

    if (!fs.existsSync(logDir)) {
      console.log("üß©downloadAll: ‡πÑ‡∏°‡πà‡∏°‡∏µ log ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î ‚Äî ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà...");
      fs.mkdirSync(logDir, { recursive: true });
      return;
    }

    // üî∏ ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå log ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const logFiles = fs.readdirSync(logDir).filter(f => f.endsWith("_messages.json"));
    console.log(`üß©downloadAll: ‡∏û‡∏ö log ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${logFiles.length} ‡πÑ‡∏ü‡∏•‡πå`);

    for (const logFile of logFiles) {
      const logPath = path.join(logDir, logFile);
      const logData = JSON.parse(fs.readFileSync(logPath));

      for (const item of logData) {
        if (!item.filePath && item.messageType && item.messageId) {
          // üî∏ ‡∏ï‡∏£‡∏ß‡∏à‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå
          let folderType = "files";
          if (item.messageType === "image") folderType = "images";
          if (item.messageType === "video") folderType = "videos";
          if (item.messageType === "audio") folderType = "audio";

          const dateDir = new Date(item.timestamp).toISOString().split("T")[0];
          const typeDir = path.join(baseDir, folderType, dateDir);

          if (!fs.existsSync(typeDir)) fs.mkdirSync(typeDir, { recursive: true });

          const fileName = `${Date.now()}_${item.messageId}.${getFileExtension(folderType)}`;
          const filePath = path.join(typeDir, fileName);

          // üî∏ ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
          if (fs.existsSync(filePath)) {
            console.log(`‚è©downloadAll: ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß: ${fileName}`);
            continue;
          }

          // üî∏ ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å LINE API
          console.log(`‚¨áÔ∏èdownloadAll: ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î ${item.messageType} (${item.messageId})...`);
          const stream = await client.getMessageContent(item.messageId);

          // ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô stream ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
          const writable = fs.createWriteStream(filePath);
          await new Promise((resolve, reject) => {
            stream.pipe(writable);
            stream.on("end", resolve);
            stream.on("error", reject);
          });

          // üî∏ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï log
          item.filePath = filePath;
          console.log(`‚úÖdownloadAll: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${filePath}`);

          // üî∏ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡πà‡∏≠‡∏ô saveChatLog
          const shouldSaveLog =
            item.messageType === "image" ||
            item.messageType === "video" ||
            item.messageType === "audio" ||
            item.messageType === "file" ||
            (item.messageType === "richMessage" && (item.filePath || (item.text && item.text.length > 0)));

          if (shouldSaveLog) {
            saveChatLog(item);
          }
        }
      }

      // üî∏ ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô log ‡∏Å‡∏•‡∏±‡∏ö (update filePath)
      fs.writeFileSync(logPath, JSON.stringify(logData, null, 2));
    }

    console.log("üéØdownloadAll: ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!");

  } catch (error) {
    console.error("‚ùådownloadAll: downloadAllExpiredFiles.Error:", error.message);
  }
}

// üîπ ‡∏õ‡∏£‡∏±‡∏ö saveChatLog ‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
function saveChatLog(message) {
  const baseDir = path.join(process.cwd(), "chat_history", "logs");
  if (!fs.existsSync(baseDir)) fs.mkdirSync(baseDir, { recursive: true });

  const filePath = path.join(baseDir, "messages.jsonl");

  const logEntry = {
    timestamp: message.timestamp || new Date().toISOString(),
    senderName: message.senderName || null,
    text: message.text || null,
    filePath: message.filePath || null
  };

  fs.appendFileSync(filePath, JSON.stringify(logEntry) + "\n");
}


/**
 * üîπ ‡∏ï‡∏±‡∏ß‡∏ä‡πà‡∏ß‡∏¢: ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
 */
function getFileExtension(type) {
  switch (type) {
    case "images": return "jpg";
    case "videos": return "mp4";
    case "audio": return "m4a";
    default: return "bin";
  }
}
