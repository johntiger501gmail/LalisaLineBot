import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";
import dotenv from "dotenv";
import { google } from "googleapis";
dotenv.config();

// ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏à‡∏≤‡∏Å .env
const projectId = process.env.GOOGLE_PROJECT_ID;

const privateKey = Buffer.from(
  process.env.GOOGLE_PRIVATE_KEY_BASE64,
  "base64"
).toString("utf8");

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡∏ö‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå auth ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ credentials ‡∏à‡∏≤‡∏Å environment
const auth = new google.auth.GoogleAuth({
  credentials: {
    client_email: process.env.GOOGLE_CLIENT_EMAIL,
    private_key: privateKey,
  },
  scopes: ["https://www.googleapis.com/auth/drive"],
});

// ‡πÅ‡∏õ‡∏•‡∏á URL ‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡∏î‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô path
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

/**
 * üîπ ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å log ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï log
 */
export async function downloadAllExpiredFiles(client) {
  try {
    const { baseDir, logDir } = ensureLocalFolders(); // ‚úÖ ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà undefined
    console.log("üß© DEBUG ensureLogSetup():", { baseDir, logDir });

    // ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå log messages.jsonl
    const logFile = path.join(logDir, "messages.jsonl");
    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ß‡πà‡∏≤‡∏á
    if (!fs.existsSync(logFile)) {
      fs.writeFileSync(logFile, "", "utf-8");
      console.log("‚ÑπÔ∏è ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå log ‡πÉ‡∏´‡∏°‡πà: messages.jsonl");
    }

    const lines = fs.readFileSync(logFile, "utf-8")
                    .split("\n")
                    .filter(l => l.trim() !== "");
    const logData = lines.map(l => JSON.parse(l));

    console.log(`üß© downloadAll: ‡∏û‡∏ö log ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${logData.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);

    for (const item of logData) {
      if (!item.filePath && item.messageType && item.messageId) {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå
        let folderType = "files";
        if (item.messageType === "image") folderType = "images";
        if (item.messageType === "video") folderType = "videos";
        if (item.messageType === "audio") folderType = "audio";

        const dateDir = new Date(item.timestamp).toISOString().split("T")[0];
        const typeDir = path.join(baseDir, folderType, dateDir);
        if (!fs.existsSync(typeDir)) fs.mkdirSync(typeDir, { recursive: true });
        // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Drive subfolder (‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ)
        const driveFolderId = await ensureDriveFolders(folderType, dateDir);

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå
        const fileName = `${Date.now()}_${item.messageId}.${getFileExtension(folderType)}`;
        const filePath = path.join(typeDir, fileName);

        if (fs.existsSync(filePath)) {
          console.log(`‚è© ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß: ${fileName}`);
          continue;
        }

        console.log(`‚¨áÔ∏è ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î ${item.messageType} (${item.messageId})...`);
        const stream = await client.getMessageContent(item.messageId);

        const writable = fs.createWriteStream(filePath);
        await new Promise((resolve, reject) => {
          stream.pipe(writable);
          stream.on("end", resolve);
          stream.on("error", reject);
        });

        item.filePath = filePath;
        console.log(`‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${filePath}`);

        // ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏õ Drive ‡πÉ‡∏ä‡πâ driveFolderId
        // await uploadFileToDrive(filePath, fileName, driveFolderId);

        saveChatLog(item);
      }
    }

    // ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô log ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏¥‡∏°
    fs.writeFileSync(logFile, logData.map(d => JSON.stringify(d)).join("\n"));

    console.log("üéØ downloadAll: ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!");

  } catch (error) {
    console.error("‚ùå downloadAllExpiredFiles.Error:", error);
  }
}
// üîπ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÇ‡∏•‡∏Ñ‡∏≠‡∏•‡∏™‡∏µ‡πà‡∏≠‡∏±‡∏ô
export function ensureLocalFolders() {
  const baseDir = path.join(__dirname, "downloads");
  const folderNames = ["logs", "images", "videos", "audio"];

  if (!fs.existsSync(baseDir)) fs.mkdirSync(baseDir, { recursive: true });

  const folderPaths = {};

  folderNames.forEach(name => {
    const fullPath = path.join(baseDir, name);
    if (!fs.existsSync(fullPath)) {
      fs.mkdirSync(fullPath, { recursive: true });
      console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÇ‡∏•‡∏Ñ‡∏≠‡∏•: ${fullPath}`);
    }
    folderPaths[name] = fullPath;
  });

  return { baseDir, ...folderPaths };
}

// üîπ ‡∏™‡∏£‡πâ‡∏≤‡∏á folder ‡∏ö‡∏ô Google Drive
export async function ensureDriveFolders() {
  const folderNames = ["logs", "images", "videos", "audio"];
  const folderIds = {};

  for (const name of folderNames) {
    folderIds[name] = await createDriveFolderIfNotExists(name);
  }

  return folderIds;
}

// üîπ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏£‡πâ‡∏≤‡∏á folder ‡∏ö‡∏ô Drive ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
async function createDriveFolderIfNotExists(name, parentId = null) {
  const client = await auth.getClient();
  const drive = google.drive({ version: "v3", auth: client });

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ folder ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  const qParts = [`mimeType='application/vnd.google-apps.folder'`, `name='${name}'`];
  if (parentId) qParts.push(`'${parentId}' in parents`);
  const resList = await drive.files.list({ q: qParts.join(" and "), fields: "files(id, name)" });

  if (resList.data.files && resList.data.files.length > 0) {
    console.log(`‚ÑπÔ∏è ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå Drive ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß: ${resList.data.files[0].name}`);
    return resList.data.files[0].id;
  }

  // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ ‡∏™‡∏£‡πâ‡∏≤‡∏á folder
  const fileMetadata = {
    name,
    mimeType: "application/vnd.google-apps.folder",
    parents: parentId ? [parentId] : [],
  };

  const res = await drive.files.create({ requestBody: fileMetadata, fields: "id, name" });
  console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ö‡∏ô Drive: ${res.data.name} (${res.data.id})`);
  return res.data.id;
}
// üîπ saveChatLog ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
function saveChatLog(message) {
  const { logDir } = ensureLocalLogSetup(); // ‡πÅ‡∏Å‡πâ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
  const logFile = path.join(logDir, "messages.jsonl");

  const logEntry = {
    timestamp: message.timestamp || new Date().toISOString(),
    senderName: message.senderName || null,
    text: message.text || null,
    filePath: message.filePath || null,
    messageType: message.messageType || null,
    messageId: message.messageId || null
  };

  fs.appendFileSync(logFile, JSON.stringify(logEntry) + "\n");
}

/**
 * üîπ ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
 */
function getFileExtension(type) {
  switch (type) {
    case "images": return "jpg";
    case "videos": return "mp4";
    case "audio": return "m4a";
    default: return "bin";
  }
}
