import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";
import dotenv from "dotenv";
import { google } from "googleapis";
dotenv.config();

// ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏à‡∏≤‡∏Å .env
const projectId = process.env.GOOGLE_PROJECT_ID;

const privateKey = Buffer.from(
  process.env.GOOGLE_PRIVATE_KEY_BASE64,
  "base64"
).toString("utf8");

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡∏ö‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå auth ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ credentials ‡∏à‡∏≤‡∏Å environment
const auth = new google.auth.GoogleAuth({
  credentials: {
    client_email: process.env.GOOGLE_CLIENT_EMAIL,
    private_key: privateKey,
  },
  scopes: ["https://www.googleapis.com/auth/drive"],
});

// ‡πÅ‡∏õ‡∏•‡∏á URL ‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡∏î‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô path
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const driveClient = await auth.getClient();
const drive = google.drive({ version: "v3", auth: driveClient });
/**
 * üîπ ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å log ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï log
 */
// üîπ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å
export async function downloadAllExpiredFiles(client) {
  try {
    // 1Ô∏è‚É£ ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ö‡∏ô Drive
    const folderIds = await ensureDriveFolders(drive);


    // 2Ô∏è‚É£ ‡πÇ‡∏´‡∏•‡∏î log ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ
    const { fileId: logFileId, logData } = await loadDriveLog(drive, folderIds.logs);


    // 3Ô∏è‚É£ ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
    for (const item of logData) {
      if (item.filePath || !item.messageType || !item.messageId) continue;


      let folderType = "files";
      if (item.messageType === "image") folderType = "images";
      if (item.messageType === "video") folderType = "videos";
      if (item.messageType === "audio") folderType = "audio";


      console.log(`‚¨áÔ∏è ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î ${item.messageType} (${item.messageId})...`);
      const stream = await client.getMessageContent(item.messageId);


      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå temp ‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏õ Drive
      const tmpPath = path.join(process.cwd(), `${Date.now()}_${item.messageId}.${getFileExtension(folderType)}`);
      await new Promise((resolve, reject) => {
        const writable = fs.createWriteStream(tmpPath);
        stream.pipe(writable);
        stream.on("end", resolve);
        stream.on("error", reject);
      });


      // ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏õ Drive folder ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
      const fileMetadata = { name: path.basename(tmpPath), parents: [folderIds[folderType]] };
      const media = { body: fs.createReadStream(tmpPath) };
      const uploaded = await drive.files.create({ requestBody: fileMetadata, media, fields: "id, name" });


      item.filePath = `DriveFileID:${uploaded.data.id}`;
      console.log(`‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ö‡∏ô Drive: ${uploaded.data.name}`);


      fs.unlinkSync(tmpPath); // ‡∏•‡∏ö temp file
    }


    // 4Ô∏è‚É£ ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô log ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ Drive
    await saveDriveLog(drive, folderIds.logs, logFileId, logData);
    console.log("üéØ ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!");


  } catch (err) {
    console.error("‚ùå downloadAllExpiredFiles.Error:", err);
  }
}
// ----------------------- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠ -------------------------
// Step 1: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ö‡∏ô Drive
async function ensureDriveFolders(drive) {
  const folderNames = ["logs", "images", "videos", "audio"];
  const folderIds = {};


  for (const name of folderNames) {
    const q = `mimeType='application/vnd.google-apps.folder' and name='${name}'`;
    const res = await drive.files.list({ q, fields: "files(id, name)" });


    if (res.data.files && res.data.files.length > 0) {
      folderIds[name] = res.data.files[0].id;
      console.log(`‚ÑπÔ∏è ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå Drive ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß: ${name}`);
    } else {
      const fileMetadata = { name, mimeType: "application/vnd.google-apps.folder" };
      const folder = await drive.files.create({ requestBody: fileMetadata, fields: "id, name" });
      folderIds[name] = folder.data.id;
      console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ö‡∏ô Drive: ${folder.data.name}`);
    }
  }
  return folderIds;
}

// Step 2: ‡πÇ‡∏´‡∏•‡∏î log ‡∏à‡∏≤‡∏Å Drive ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
async function loadDriveLog(drive, logsFolderId) {
  const q = `'${logsFolderId}' in parents and name='messages.jsonl'`;
  const res = await drive.files.list({ q, fields: "files(id, name)" });


  let fileId;
  if (res.data.files && res.data.files.length > 0) {
    fileId = res.data.files[0].id;
    console.log("‚ÑπÔ∏è ‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå log ‡∏ö‡∏ô Drive: messages.jsonl");
  } else {
    const fileMetadata = { name: "messages.jsonl", parents: [logsFolderId] };
    const media = { mimeType: "application/json", body: "" };
    const file = await drive.files.create({ requestBody: fileMetadata, media, fields: "id, name" });
    fileId = file.data.id;
    console.log("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå log ‡πÉ‡∏´‡∏°‡πà‡∏ö‡∏ô Drive: messages.jsonl");
  }


  // ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ log
  const contentRes = await drive.files.get({ fileId, alt: "media" }, { responseType: "stream" });
  let data = "";
  await new Promise((resolve, reject) => {
    contentRes.data.on("data", chunk => (data += chunk));
    contentRes.data.on("end", resolve);
    contentRes.data.on("error", reject);
  });


  const lines = data.split("\n").filter(l => l.trim() !== "");
  const logData = lines.map(l => JSON.parse(l));


  return { fileId, logData };
}


// Step 4: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ Drive
async function saveDriveLog(drive, logsFolderId, fileId, logData) {
  const tempPath = path.join(process.cwd(), `messages_temp.jsonl`);
  fs.writeFileSync(tempPath, logData.map(d => JSON.stringify(d)).join("\n"), "utf8");


  const media = { body: fs.createReadStream(tempPath) };
  await drive.files.update({ fileId, media });
  fs.unlinkSync(tempPath);
}


// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡πÑ‡∏ü‡∏•‡πå
function getFileExtension(type) {
  switch (type) {
    case "images": return "jpg";
    case "videos": return "mp4";
    case "audio": return "m4a";
    default: return "bin";
  }
}
