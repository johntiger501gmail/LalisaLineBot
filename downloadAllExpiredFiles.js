import fs from "fs";
import path from "path";

function ensureLogSetup() {
  const baseDir = path.join(process.cwd(), "chat_history");
  const logDir = path.join(baseDir, "logs");
  const logFile = path.join(logDir, "messages.jsonl");

  // р╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╕Кр╣Ир╕зр╕вр╕кр╕гр╣Йр╕▓р╕Зр╣Вр╕Яр╕ер╣Ар╕Фр╕нр╕гр╣М
  function createDir(dirPath) {
    if (!fs.existsSync(dirPath)) {
      fs.mkdirSync(dirPath, { recursive: true });
      console.log(`тЬЕ р╕кр╕гр╣Йр╕▓р╕Зр╣Вр╕Яр╕ер╣Ар╕Фр╕нр╕гр╣М: ${dirPath}`);
    } else {
      console.log(`тД╣я╕П р╣Вр╕Яр╕ер╣Ар╕Фр╕нр╕гр╣Мр╕бр╕╡р╕нр╕вр╕╣р╣Ир╣Бр╕ер╣Йр╕з: ${dirPath}`);
    }
  }

  // р╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╕Кр╣Ир╕зр╕вр╕кр╕гр╣Йр╕▓р╕Зр╣Др╕Яр╕ер╣М log
  function createLogFile(filePath) {
    if (!fs.existsSync(filePath)) {
      fs.writeFileSync(filePath, "");
      console.log(`тЬЕ р╕кр╕гр╣Йр╕▓р╕Зр╣Др╕Яр╕ер╣М log: ${filePath}`);
    } else {
      console.log(`тД╣я╕П р╣Др╕Яр╕ер╣М logр╕бр╕╡р╕нр╕вр╕╣р╣Ир╣Бр╕ер╣Йр╕з: ${filePath}`);
    }
  }

  // р╕кр╕гр╣Йр╕▓р╕Зр╣Вр╕Яр╕ер╣Ар╕Фр╕нр╕гр╣Мр╕лр╕ер╕▒р╕Бр╣Бр╕ер╕░ logs
  [baseDir, logDir].forEach(createDir);

  // р╕кр╕гр╣Йр╕▓р╕Зр╣Др╕Яр╕ер╣М log
  createLogFile(logFile);

  // р╕кр╕гр╣Йр╕▓р╕Зр╣Вр╕Яр╕ер╣Ар╕Фр╕нр╕гр╣Мр╕кр╕│р╕лр╕гр╕▒р╕Ър╣Ар╕Бр╣Зр╕Ър╣Др╕Яр╕ер╣Мр╕Фр╕▓р╕зр╕Щр╣Мр╣Вр╕лр╕ер╕Фр╕ер╣Ир╕зр╕Зр╕лр╕Щр╣Йр╕▓
  const folders = ["images", "videos", "files", "audio"];
  folders.forEach(f => createDir(path.join(baseDir, f)));

  console.log(`ЁЯУВ р╕Бр╕▓р╕гр╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╣Вр╕Яр╕ер╣Ар╕Фр╕нр╕гр╣Мр╣Бр╕ер╕░р╣Др╕Яр╕ер╣М log р╣Ар╕кр╕гр╣Зр╕Ир╣Ар╕гр╕╡р╕вр╕Ър╕гр╣Йр╕нр╕в: ${baseDir}`);

  return { baseDir, logDir, logFile };
}

export default ensureLogSetup;


/**
 * ЁЯФ╣ saveChatLog р╣Ар╕Бр╣Зр╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕ер╕кр╕│р╕Др╕▒р╕Н
 */
function saveChatLog(message) {
  const { logFile } = ensureLogSetup();

  const logEntry = {
    timestamp: message.timestamp || new Date().toISOString(),
    senderName: message.senderName || null,
    text: message.text || null,
    filePath: message.filePath || null,
    messageType: message.messageType || null,
    messageId: message.messageId || null
  };

  fs.appendFileSync(logFile, JSON.stringify(logEntry) + "\n");
}

/**
 * ЁЯФ╣ р╕Др╕╖р╕Щр╕Др╣Ир╕▓р╕Щр╕▓р╕бр╕кр╕Бр╕╕р╕ер╣Др╕Яр╕ер╣Мр╕Хр╕▓р╕бр╕Ыр╕гр╕░р╣Ар╕ар╕Ч
 */
function getFileExtension(type) {
  switch (type) {
    case "images": return "jpg";
    case "videos": return "mp4";
    case "audio": return "m4a";
    default: return "bin";
  }
}

/**
 * ЁЯФ╣ р╕Фр╕▓р╕зр╕Щр╣Мр╣Вр╕лр╕ер╕Фр╣Др╕Яр╕ер╣Мр╕Ир╕▓р╕Б log р╣Бр╕ер╕░р╕нр╕▒р╕Ыр╣Ар╕Фр╕Х log
 */
export async function downloadAllExpiredFiles(client) {
  try {
    const { baseDir, logDir } = ensureLogSetup();

    // р╕нр╣Ир╕▓р╕Щр╣Др╕Яр╕ер╣М log messages.jsonl
    const logFile = path.join(logDir, "messages.jsonl");
    if (!fs.existsSync(logFile)) return console.log("тЪая╕П р╣Др╕бр╣Ир╕бр╕╡р╣Др╕Яр╕ер╣М log");

    const lines = fs.readFileSync(logFile, "utf-8").split("\n").filter(l => l.trim() !== "");
    const logData = lines.map(l => JSON.parse(l));

    console.log(`ЁЯзй downloadAll: р╕Юр╕Ъ log р╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф ${logData.length} р╕гр╕▓р╕вр╕Бр╕▓р╕г`);

    for (const item of logData) {
      if (!item.filePath && item.messageType && item.messageId) {
        // р╕Хр╕гр╕зр╕Ир╕Ыр╕гр╕░р╣Ар╕ар╕Чр╣Др╕Яр╕ер╣М
        let folderType = "files";
        if (item.messageType === "image") folderType = "images";
        if (item.messageType === "video") folderType = "videos";
        if (item.messageType === "audio") folderType = "audio";

        const dateDir = new Date(item.timestamp).toISOString().split("T")[0];
        const typeDir = path.join(baseDir, folderType, dateDir);
        if (!fs.existsSync(typeDir)) fs.mkdirSync(typeDir, { recursive: true });

        const fileName = `${Date.now()}_${item.messageId}.${getFileExtension(folderType)}`;
        const filePath = path.join(typeDir, fileName);

        if (fs.existsSync(filePath)) {
          console.log(`тПй р╕Вр╣Йр╕▓р╕бр╣Др╕Яр╕ер╣Мр╕Чр╕╡р╣Ир╕бр╕╡р╕нр╕вр╕╣р╣Ир╣Бр╕ер╣Йр╕з: ${fileName}`);
          continue;
        }

        console.log(`тмЗя╕П р╕Фр╕▓р╕зр╕Щр╣Мр╣Вр╕лр╕ер╕Ф ${item.messageType} (${item.messageId})...`);
        const stream = await client.getMessageContent(item.messageId);

        const writable = fs.createWriteStream(filePath);
        await new Promise((resolve, reject) => {
          stream.pipe(writable);
          stream.on("end", resolve);
          stream.on("error", reject);
        });

        item.filePath = filePath;
        console.log(`тЬЕ р╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╣Др╕Яр╕ер╣Мр╕кр╕│р╣Ар╕гр╣Зр╕И: ${filePath}`);

        saveChatLog(item);
      }
    }

    // р╣Ар╕Вр╕╡р╕вр╕Щ log р╕Бр╕ер╕▒р╕Ър╣Др╕Яр╕ер╣Мр╣Ар╕Фр╕┤р╕б
    fs.writeFileSync(logFile, logData.map(d => JSON.stringify(d)).join("\n"));

    console.log("ЁЯОп downloadAll: р╕Фр╕▓р╕зр╕Щр╣Мр╣Вр╕лр╕ер╕Фр╣Др╕Яр╕ер╣Мр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Фр╣Ар╕кр╕гр╣Зр╕Ир╕кр╕┤р╣Йр╕Щ!");

  } catch (error) {
    console.error("тЭМ downloadAllExpiredFiles.Error:", error);
  }
}
