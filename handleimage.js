import fs from "fs";
import path from "path";
import { downloadAndSaveImage } from "./imageload.js";

// üß©1. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏•‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå history ‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
function saveFileToHistory(fileBuffer, originalFileName, type="images") {
  const baseDir = path.join(process.cwd(), "chat_history");   // ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å
  const dateDir = new Date().toISOString().split("T")[0];     // YYYY-MM-DD
  const typeDir = path.join(baseDir, type, dateDir);

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
  if (!fs.existsSync(typeDir)) fs.mkdirSync(typeDir, { recursive: true });

  // ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ö‡∏ö timestamp + ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏¥‡∏°
  const fileName = `${Date.now()}_${originalFileName}`;
  const filePath = path.join(typeDir, fileName);

  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏•‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå
  fs.writeFileSync(filePath, fileBuffer);

  return filePath; // ‡∏Ñ‡∏∑‡∏ô path ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
}

export async function handleImageMessage(event, replyToken, userId, client, userName) {
  try {
    // üß© 3. ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    const imageBuffer = await downloadAndSaveImage(event, replyToken, userId, client, userName);

    if (!imageBuffer) {
      console.error("üß©handleImage.Failed to download image");
      return null;
    }
    // üß© 4. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏•‡∏á folder history/images/YYYY-MM-DD
    const originalFileName = `userImage.jpg`; // ‡∏´‡∏£‡∏∑‡∏≠‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å downloadAndSaveImage
    const savedPath = saveFileToHistory(imageBuffer, originalFileName, "images");

    // üß© 5. ‡∏™‡∏£‡πâ‡∏≤‡∏á log JSON ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏†‡∏≤‡∏û
    const logFile = path.join(process.cwd(), "chat_history", "logs", `${new Date().toISOString().split("T")[0]}_messages.json`);
    if (!fs.existsSync(path.dirname(logFile))) fs.mkdirSync(path.dirname(logFile), { recursive: true });

    let logData = [];
    if (fs.existsSync(logFile)) {
      logData = JSON.parse(fs.readFileSync(logFile));
    }

    logData.push({
      timestamp: new Date().toISOString(),
      userId,
      userName,
      messageType: "image",
      fileName: path.basename(savedPath),
      filePath: savedPath
    });
    // üß© 6. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
    fs.writeFileSync(logFile, JSON.stringify(logData, null, 2));
    console.log("üß©handleImage.Saved image and log to PC:", savedPath);
    
  } catch (error) {
    // üß© 7. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤
    console.error("üß©handleImage.Error:", {
      message: error.message,
      response: error.response?.data,
    });
  }  
}

