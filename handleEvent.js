//import { handleSelectedMenu } from './handleselect.js';
import { handleAudioMessage } from "./handleaudio.js";
import { handleVideoMessage } from "./videos.js";
import { handleReplyMessage } from "./replys.js";
import { handleTextMessage } from "./textmessages.js";
import { handleStickerMessage } from './handlesticker.js';
import { handleImageMessage } from './handleimage.js';
import { sendFallbackMenu } from './ansmenu.js'
import { downloadAndSaveImage } from './imageload.js'; 
import { getGoogleSearchResults } from "./googles.js";
import { chatHistory, printChatHistory, exportChatHistoryJSON, exportChatHistoryCSV } from './chatExport.js';

export async function handleEventTypes(event, replyToken, userId, client, botUserId) {
  //console.log("üß© FULL EVENT DEBUG:", JSON.stringify(event, null, 2));
  //console.log("üß© event.type:", event?.type);
  if (!event || !event.type) {
    console.error("swEvents: Event object is missing or invalid:", event);
    return;
  }

  const message = event?.message || null;
  const source = event?.source || null;
  let profile = { displayName: "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠" };
  if (userId) {
    profile = await client.getProfile(userId).catch(() => ({ displayName: "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠" }));
  }

  //console.log("üß© message object:", JSON.stringify(message, null, 2));
  const metadata = {
    eventType: event.type || null,
    messageType: message?.type || null,
    userId : event.source.type === "user" ? event.source.userId : null,
    userName : profile.displayName || "‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô",
    sourceType: source?.type || null,
    sourceId: source?.userId || source?.groupId || source?.roomId || null,
    timestamp: event.timestamp || Date.now(),
    replyToMessageId: message?.repliedMessage?.id || null,
    mentions: message?.text?.match(/@([^\s]+)/g) || [],
    filePath: null,
    textContent: message?.text || null
  };

  let locationMessage;
  switch (event.type) {
    case "postback":
      const postbackData = event.postback.data;
      console.log("üß©sw.event.type:postbackData:", postbackData);
      //await handleSelectedMenu(event, client, event.replyToken, userId, postbackData);  // ‡πÉ‡∏ä‡πâ await
      break;
      
    case "follow":
      console.log("üß©sw.event.type:Follow > ", message);
      /*await client.replyMessage(replyToken, {
        type: "text",
        text: "sw.event.type:follow:‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö! ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏â‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô",
      }).catch(console.error); */
      break;

    case "join":
      console.log("üß©sw.event.type:join > ", message);
      const joinMessage = {
        type: "text",
        text: "sw.event.type:join:‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô! ‡∏â‡∏±‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß!"
      };
      //await client.replyMessage(replyToken, joinMessage).catch(console.error);
      break;

    case "leave":
      console.log("üß©sw.event.type: leave > ", message);
      console.log(`üß©sw.event:Left group: ${event.source.groupId}`);
      break;

    case "message":
      console.log("üß©sw.EventType:", event.type, "sw.Events.Message.type:", message.type);
      
      if (!message || !message.type) {
        console.error("sw.Message or message.type is missing or invalid:", message);
        /*await client.replyMessage(replyToken, {
          type: "text",
          text: `swEvents. ${message} ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ.`
        }); */
      }
      switch (message.type.toLowerCase()) {
        case "image":
          const choiceMessages = [ 
            `üß©sw.message.type:‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤! ${metadata.userName}`,
            `üß©sw.message.type:‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡∏î‡∏π‡∏î‡∏µ‡∏°‡∏≤‡∏Å‡πÄ‡∏•‡∏¢! ${metadata.userName}`,
            `üß©sw.message.type:‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì ‡∏≠‡∏¢‡πà‡∏≤‡∏™‡πà‡∏á‡∏†‡∏≤‡∏û‡∏°‡∏≤‡∏≠‡∏µ‡∏Å‡∏ô‡∏∞! ${metadata.userName}`,
          ];
        
          const randomMessage = choiceMessages[Math.floor(Math.random() * choiceMessages.length)]; 
          const resultDBF = "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå DBF"; 
          const intentResult = "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£ Intent";
          const resultOther = "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°";
          //console.log("sw.handleImageMessage image: handleimage.js");
          try {
            const imagePath = await downloadAndSaveImage(event); // ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û
            console.log("üß©sw.message.type.imagePath", JSON.stringify(imagePath, null, 2));
          
            if (!imagePath) {
              // ‡∏ñ‡πâ‡∏≤‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
              console.error('üß©sw.message.type.Failed to download or save image');
              return null;
            }
          
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á searchResult ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå
            const fileName = imagePath.split('/').pop(); // ‡πÅ‡∏¢‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å path
            const baseUrl = "https://lalisalinebot.onrender.com/images"; //‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏†‡∏≤‡∏û URL https://tiger501linebot.onrender.com/images 
          
            const searchResult = {
              type: 'image',
              originalContentUrl: `${baseUrl}/${fileName}`, // URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏û‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö
              previewImageUrl: `${baseUrl}/${fileName}`,   // URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏û‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
              text: randomMessage,
            };
          
            const contentText = { // ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô contentText
              resultDBF: resultDBF || "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
              intentResult: intentResult || "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£ Intent",
              searchResult: searchResult || {},
              resultOther: resultOther || "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°",
            };
          
            // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö Flex Message
            //await sendFallbackMenu(replyToken, client, userId, searchResult, contentText);
          } catch (error) {
            console.error("sw.message.type.Error in handleImageMessage:", {
              message: error.message,
              response: error.response?.data,
            });
          }            
          await handleImageMessage(event, replyToken, userId, client);  // ‡πÉ‡∏ä‡πâ await
          break;
        case "location":  // ‡∏Å‡∏£‡∏ì‡∏µ‡πÇ‡∏•‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô
          console.log("üß©sw.message.type:Received a location message:", message);

          const googleMapsLink = `https://www.google.com/maps?q=${message.latitude},${message.longitude}`;

          const locationMessage = {
              type: "text",
              text: `‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ä‡∏£‡πå‡πÇ‡∏•‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô: ${message.title}\n` +
                    `‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà: ${message.address}\n` +
                    `‡∏û‡∏¥‡∏Å‡∏±‡∏î: (${message.latitude}, ${message.longitude})\n\n` +
                    `‡∏î‡∏π‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà: ${googleMapsLink}`
          };
          //await client.replyMessage(replyToken, locationMessage);
          break;
        case "text":
          let mentionedUsers = [];
          
          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö @mention
          if (message.text) {
            // regex ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö @username
            const mentionMatches = message.text.match(/@([^\s]+)/g);
            
            if (mentionMatches) {
              for (const mention of mentionMatches) {
                const name = mention.slice(1); // ‡∏ï‡∏±‡∏î @ ‡∏≠‡∏≠‡∏Å
                try {
                  // ‡∏î‡∏∂‡∏á profile ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å userId ‡∏ñ‡πâ‡∏≤ name ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö userName
                  // NOTE: ‡πÉ‡∏ô LINE API, ‡πÄ‡∏£‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ userId ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ô‡πÉ‡∏ô group/room ‡πÄ‡∏û‡∏∑‡πà‡∏≠ getProfile
                  // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏°‡∏µ mapping userName -> userId
                  // ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏£‡∏¥‡∏á‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ event.source.groupId ‡πÅ‡∏•‡∏∞ getGroupMemberProfile
                  const profile = await client.getProfile(userId); // userId ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á
                  if (profile.displayName === name) {
                    mentionedUsers.push({
                      userId: userId,
                      displayName: profile.displayName
                    });
                  }
                } catch (err) {
                  console.error("sw.message.type:Cannot fetch profile for mention:", name, err);
                }
              }
            }
          }

          // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
          if (message.repliedMessage && typeof message.repliedMessage === "object") {
            try {
              await handleReplyMessage(event, replyToken, client, botUserId, mentionedUsers);
            } catch (error) {
              console.error("üß©sw.message.type:Error handling reply message:", error);
              /*await client.replyMessage(replyToken, {
                type: "text",
                text: "üß©sw.EventType:repliedMessage:‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö",
              }); */
            }
          } else {
            console.log("üß©sw.message.type.handleTextMessage message: " + message.text);
            await handleTextMessage(event, replyToken, userId, client, mentionedUsers);
          }
          break;

        case "audio":
          try {
            const resultText = await handleAudioMessage(event, replyToken, client);
            if (resultText && typeof resultText === 'object' && resultText.text) {
              message = {
                type: "text",
                text: resultText.text || "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ñ‡∏≠‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏î‡πâ."};  // ‡πÄ‡∏≠‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏°‡∏≤‡πÉ‡∏ä‡πâ
                console.log('sw.message.type.‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á:', message.text);
            } else {
                console.log('sw.message.type.‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏ö‡∏≠‡∏ó ‡∏´‡∏£‡∏∑‡∏≠ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà string', resultText);
                message = "";  // ‡∏ñ‡πâ‡∏≤ resultText ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏î‡πâ
            }          
            const resultDBF = "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå DBF" || null;
            const intentResult = "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£ Intent" || null; 
            const resultOther = "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" || null; 
            let searchResult = {
              type: "text",
              text: resultText.text || "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤",
            }; // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏´‡∏≤‡∏Å resultText ‡πÄ‡∏õ‡πá‡∏ô undefined
            const contentText = { 
              resultDBF: resultDBF, 
              intentResult: intentResult,
              searchResult: searchResult,
              resultOther: resultOther
            };

            console.log("swmessage.type.audioHandling:", contentText?.searchResult?.text || "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô searchResult");
            sendFallbackMenu(replyToken, client, userId, message, contentText);
          } catch (error) {
            console.error('sw.message.type.‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏á:', error);
          }
          break;

        case "sticker":
          await handleStickerMessage(event, replyToken, userId, client);  // ‡πÉ‡∏ä‡πâ await
          break;

        case "video":
          await handleVideoMessage(event, replyToken, message, client);  // ‡πÉ‡∏ä‡πâ await
          break;

        default:
          console.error("Unsupported message type:", message.type);
          await client.replyMessage(replyToken, {
            type: "text",
            text: "default.message.type:‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ",
          });
          break;
      }
      break;

    default:
      console.log("Unknown event type:", event.type);
      console.error("Unsupported event type:", event.type);
      await client.message(replyToken, {
        type: "text",
        text: "default.event.type:‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ",
      });
      break;
  }
  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å metadata
  chatHistory.push(metadata);

  // **‡πÅ‡∏™‡∏î‡∏á metadata ‡πÉ‡∏ô Console ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô**
  console.log(`swEvents.[${new Date(metadata.timestamp).toLocaleString()}] userId: ${metadata.userId}, userName: ${metadata.userName}, type: ${metadata.messageType}, content: ${metadata.textContent || metadata.filePath || "-"}`);

  // **‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å metadata ‡∏ó‡∏∏‡∏Å‡∏ä‡∏ô‡∏¥‡∏î**
  //saveEventMetadata(metadata);
}
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å metadata
function saveEventMetadata(metadata) {
  // ‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏´‡∏£‡∏∑‡∏≠ JSON file / local storage
  console.log("swEvents.Saved metadata:", metadata);
}
export const handleUrlMessage = async (event, replyToken, userId, client) => {
  const message = event?.message || null; // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å event

  if (!message) {
    console.error("swEvents.No message found in the event");
    return;
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ message ‡πÄ‡∏õ‡πá‡∏ô string ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  if (typeof message.text !== "string") {
    console.log(`swEvents.‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡∏≠‡∏á message: ${typeof message}`, message);
    return;
  }

  const messageContent = message.text.trim(); // ‡∏ï‡∏±‡∏î‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏´‡∏•‡∏±‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°

  // Regular Expression ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö URL
  const urlRegex = /^(https?:\/\/)?([\w-]+\.)+[\w-]+(\/[\w-./?%&=]*)?$/;

  let resultDBF = "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå DBF";
  let intentResult = "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£ Intent";
  let resultOther = "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•";
  let searchResult = [];

  if (urlRegex.test(messageContent)) {
    console.log("swEvents.‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏ô‡∏¥‡∏î url:", messageContent);
    searchResult = await getGoogleSearchResults(url) || [];
    if (!Array.isArray(searchResult)) {
      console.error("swEvents.searchResult is not a valid array:", searchResult);
      searchResult = [];
  }

  console.log("swEvents.Search results for URL:", searchResult);
  } else {
    console.log(`swEvents.‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡∏≠‡∏á message: ${typeof messageContent}`, messageContent);
    
  }

  // ‡∏£‡∏ß‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô contentText
  const contentText = {
    resultDBF: resultDBF,
    intentResult: intentResult,
    searchResult: searchResult,
    resultOther: resultOther,
  };

  console.log("swEvents.Final contentText to sendFallbackMenu:", contentText);
  sendFallbackMenu(replyToken, client, userId, messageContent, contentText);
};
